"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[2022],{3697:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var s=t(4848),a=t(8453);const i={sidebar_label:"How to create tasks",sidebar_position:4},r="What are tasks?",o={id:"Tutorials/Using_TaskManager_Class",title:"What are tasks?",description:"`Tasks are a great tool to do multiple things at once, but they can be difficult to use properly. The most important thing to remember when using tasks is that tasks aren\u2019t truly running in the background - they are run one at a time and swapped out by the PROS scheduler. If your task performs some repeated action (e.g. a while loop), you should include a delay() or taskdelayuntil(). Without a delay()` statement, your task could starve the processor of resources and prevent the kernel from running properly.",source:"@site/docs/Tutorials/Using_TaskManager_Class.md",sourceDirName:"Tutorials",slug:"/Tutorials/Using_TaskManager_Class",permalink:"/Lightninglib/docs/Tutorials/Using_TaskManager_Class",draft:!1,unlisted:!1,editUrl:"https://github.com/HectorAlonso18/Lightninglib/tree/main/docs/Tutorials/Using_TaskManager_Class.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"How to create tasks",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Programming the autonomous routine",permalink:"/Lightninglib/docs/Tutorials/Autonomous_Routines_examples"},next:{title:"How to create a PID",permalink:"/Lightninglib/docs/Tutorials/How_to_create_PID_controllers"}},l={},d=[{value:"Creating a <code>TaskManager</code> object.",id:"creating-a-taskmanager-object",level:2},{value:"Creating and Running <code>tasks</code>",id:"creating-and-running-tasks",level:2},{value:"Creating the <code>task</code>",id:"creating-the-task",level:3},{value:"Example",id:"example",level:4},{value:"Running the <code>task</code>",id:"running-the-task",level:3},{value:"How to use it?",id:"how-to-use-it",level:4},{value:"Example, running a task.",id:"example-running-a-task",level:4},{value:"Example, running multiple tasks.",id:"example-running-multiple-tasks",level:4},{value:"Considerations",id:"considerations",level:4},{value:"Deleting <code>tasks</code>",id:"deleting-tasks",level:2},{value:"Example",id:"example-1",level:3},{value:"Considerations",id:"considerations-1",level:3},{value:"Printing current tasks",id:"printing-current-tasks",level:2},{value:"Congratulations! \ud83c\udf89",id:"congratulations-",level:2}];function c(n){const e={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",input:"input",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"what-are-tasks",children:"What are tasks?"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:"Tasks"})," are a great tool to do multiple things at once, but they can be difficult to use properly. The most important thing to remember when using ",(0,s.jsx)(e.code,{children:"tasks"})," is that ",(0,s.jsx)(e.code,{children:"tasks"})," aren\u2019t truly running in the background - they are run one at a time and swapped out by the PROS scheduler. If your task performs some repeated action (e.g. a while loop), you should include a ",(0,s.jsx)(e.code,{children:"delay()"})," or ",(0,s.jsx)(e.code,{children:"task_delay_until()"}),". Without a ",(0,s.jsx)(e.code,{children:"delay()"})," statement, your task could starve the processor of resources and prevent the kernel from running properly."]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["-",(0,s.jsx)(e.strong,{children:"Pros Documentation."})]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h1,{id:"how-to-create-tasks-using-lighting",children:["How to create tasks using ",(0,s.jsx)(e.strong,{children:"lighting"})]}),"\n",(0,s.jsxs)(e.p,{children:["In lightning, you can create and manage task using the ",(0,s.jsx)(e.code,{children:"TaskManager"})," class."]}),"\n",(0,s.jsxs)(e.h2,{id:"creating-a-taskmanager-object",children:["Creating a ",(0,s.jsx)(e.code,{children:"TaskManager"})," object."]}),"\n",(0,s.jsx)(e.p,{children:"To create a TaskManager object, simply do the following:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="main.cpp"',children:"lightning::TaskManager task_manager_name; \r\n\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h2,{id:"creating-and-running-tasks",children:["Creating and Running ",(0,s.jsx)(e.code,{children:"tasks"})]}),"\n",(0,s.jsxs)(e.h3,{id:"creating-the-task",children:["Creating the ",(0,s.jsx)(e.code,{children:"task"})]}),"\n",(0,s.jsx)(e.p,{children:"The first thing to be aware of is that you need to create the function you want to run in the background."}),"\n",(0,s.jsxs)(e.p,{children:["Commonly, this function is in a ",(0,s.jsx)(e.code,{children:"while"})," loop."]}),"\n",(0,s.jsxs)(e.admonition,{type:"note",children:[(0,s.jsx)(e.mdxAdmonitionTitle,{}),(0,s.jsx)(e.p,{children:"Remember to set a delay time. Not using a delay time will cause problems with the V5 Brain and lead to unexpected behavior."})]}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"The second thing is very important"}),", your function must to be of type ",(0,s.jsx)(e.code,{children:"void name_function (void*)"}),"."]}),"\n",(0,s.jsx)(e.h4,{id:"example",children:"Example"}),"\n",(0,s.jsx)(e.p,{children:"In the next example, we will crate a function. The objetive of this function is to sense something."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="main.cpp"',children:"void sensing_something(void*){\r\n    while (1) {\r\n    sense_sensors(); \r\n    pros::delay(util::DELAY_TIME); //10 milliseconds of delay.   \r\n  }\r\n}\r\n\n"})}),"\n",(0,s.jsx)(e.p,{children:"Note that our function meets the following:"}),"\n",(0,s.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ","It is of type ",(0,s.jsx)(e.code,{children:"void (void*)"}),"."]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ","It is inside of a ",(0,s.jsx)(e.code,{children:"loop"}),"."]}),"\n",(0,s.jsxs)(e.li,{className:"task-list-item",children:[(0,s.jsx)(e.input,{type:"checkbox",checked:!0,disabled:!0})," ","Has delay time."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h3,{id:"running-the-task",children:["Running the ",(0,s.jsx)(e.code,{children:"task"})]}),"\n",(0,s.jsxs)(e.p,{children:["Now that we have our function, it is time to run it as a task using the ",(0,s.jsx)(e.code,{children:"start_task()"})," function."]}),"\n",(0,s.jsx)(e.h4,{id:"how-to-use-it",children:"How to use it?"}),"\n",(0,s.jsx)(e.p,{children:"We need to understand parameters of this function:"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Parameters"}),(0,s.jsx)(e.th,{})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"task_name"})}),(0,s.jsx)(e.td,{children:"The name key that you want for your task."})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:(0,s.jsx)(e.code,{children:"function"})}),(0,s.jsx)(e.td,{children:"The void function that will pass."})]})]})]}),"\n",(0,s.jsxs)(e.p,{children:["First, we need to provide a name for this task. ",(0,s.jsx)(e.strong,{children:"The name is important"})," because it is useful for referencing and managing that particular task."]}),"\n",(0,s.jsx)(e.p,{children:"Then we need to provide the designated function."}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"As a result"}),", we have the following:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'task_manager_name.start_task("key_name", function); \n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h4,{id:"example-running-a-task",children:"Example, running a task."}),"\n",(0,s.jsxs)(e.p,{children:["In the next example, we will running the ",(0,s.jsx)(e.strong,{children:"previous example function"})," in the ",(0,s.jsx)(e.code,{children:"autonomous"})," function."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'{11} title="main.cpp"',children:'void sensing_something(void*){\r\n    while (1) {\r\n    sense_sensors(); \r\n    pros::delay(util::DELAY_TIME); //10 milliseconds of delay.   \r\n  }\r\n}\r\n\r\nlightning::TaskManager autonomous_task_manager; //Our task manager \r\n\r\nvoid autonomous(){\r\n    autonomous_task_manager.start_task("SENSING", sensing_something); \r\n    //WE WOULD RUNNING THE sensing_something function in the autonomous routine as a task. \r\n}\r\n\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h4,{id:"example-running-multiple-tasks",children:"Example, running multiple tasks."}),"\n",(0,s.jsxs)(e.p,{children:["You can create ",(0,s.jsx)(e.strong,{children:"more than just one task"}),"."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'{28-30} title="main.cpp"',children:'\r\n/////////////////////////////////Our functions:\r\nvoid sensing_something(void*){\r\n    while (1) {\r\n    sense_sensors(); \r\n    pros::delay(util::DELAY_TIME); //10 milliseconds of delay.   \r\n  }\r\n}\r\n\r\nvoid printing_stuff(void*){\r\n    while(1){\r\n        some_printing_function(); \r\n        pros::delay(util::DELAY_TIME); //10 milliseconds of delay.\r\n    }\r\n}\r\n\r\nvoid timer(void*){\r\n    while(1){\r\n        some_clock_function();\r\n        pros::delay(util::DELAY_TIME); //10 milliseconds of delay.\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////\r\n\r\nlightning::TaskManager autonomous_task_manager; //Our task manager \r\n\r\nvoid autonomous(){\r\n    autonomous_task_manager.start_task("SENSING", sensing_something); //FIRST TASK \r\n    autonomous_task_manager.start_task("PRINTING", printing_stuff);  //SECOND TASK\r\n    autonomous_task_manager.start_task("CLOCK",timer); //THIRD TASK\r\n}\r\n\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h4,{id:"considerations",children:"Considerations"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"You can create more than just one task."}),"\n",(0,s.jsxs)(e.li,{children:["You can create different task manager (example: One task manager for the ",(0,s.jsx)(e.strong,{children:"driver period"})," and another for the ",(0,s.jsx)(e.strong,{children:"autonomous period"}),")."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.h2,{id:"deleting-tasks",children:["Deleting ",(0,s.jsx)(e.code,{children:"tasks"})]}),"\n",(0,s.jsxs)(e.p,{children:["To delete ",(0,s.jsx)(e.code,{children:"tasks"})," use the ",(0,s.jsx)(e.code,{children:"kill_task()"})," method."]}),"\n",(0,s.jsxs)(e.p,{children:["For this function you just need to provide the ",(0,s.jsx)(e.code,{children:"task name"})," that you want delete."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'title="main.cpp"',children:'task_manager.kill_task("TASK NAME"); \n'})}),"\n",(0,s.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsxs)(e.p,{children:["Let\xb4s suppose that after using a ",(0,s.jsx)(e.code,{children:"task"})," we want to delete it."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'{16} title="main.cpp"',children:'void sensing_something(void*){\r\n    while (1) {\r\n    sense_sensors(); \r\n    pros::delay(util::DELAY_TIME); //10 milliseconds of delay.   \r\n  }\r\n}\r\n\r\nlightning::TaskManager autonomous_task_manager; //Our task manager \r\n\r\nvoid autonomous(){\r\n    autonomous_task_manager.start_task("SENSING", sensing_something); \r\n    //AFTER USING THE TASK SOME AMOUNT OF TIME \r\n    ///\r\n    ///\r\n    ///\r\n    autonomous_task_manager.kill_task("SENSING"); //KILLING THE TASK. \r\n}\r\n\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsxs)(e.p,{children:["Delete the ",(0,s.jsx)(e.code,{children:"task"})," when it is no longer required."]}),"\n",(0,s.jsx)(e.h3,{id:"considerations-1",children:"Considerations"}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"One important thing to keep in mind"}),". The tasks belong to the ",(0,s.jsx)(e.code,{children:"TaskManager"})," object. This means that if the ",(0,s.jsx)(e.code,{children:"task manager"})," is deleted, all the task will be deleted as well."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"printing-current-tasks",children:"Printing current tasks"}),"\n",(0,s.jsx)(e.p,{children:"You can print the current tasks that are running in the integrated PROS terminal . To do this you can use two different ways:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Using the ",(0,s.jsx)(e.code,{children:"print_current_tasks()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'{7} title="main.cpp"',children:'lightning::TaskManager autonomous_task_manager; //Our task manager \r\nvoid autonomous(){\r\n   autonomous_task_manager.start_task("SENSING", sensing_something); //FIRST TASK \r\n   autonomous_task_manager.start_task("PRINTING", printing_stuff);  //SECOND TASK\r\n   autonomous_task_manager.start_task("CLOCK",timer); //THIRD TASK\r\n\r\n   autonomous_task_manager.print_current_tasks(); \r\n   /* OUTPUT\r\n    SENSING\r\n    PRINTING\r\n    CLOCK\r\n   */ \r\n}\n'})}),"\n",(0,s.jsxs)(e.ol,{start:"2",children:["\n",(0,s.jsxs)(e.li,{children:["Or using ",(0,s.jsx)(e.code,{children:"std::cout"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",metastring:'{7} title="main.cpp"',children:'lightning::TaskManager autonomous_task_manager; //Our task manager \r\nvoid autonomous(){\r\n   autonomous_task_manager.start_task("SENSING", sensing_something); //FIRST TASK \r\n   autonomous_task_manager.start_task("PRINTING", printing_stuff);  //SECOND TASK\r\n   autonomous_task_manager.start_task("CLOCK",timer); //THIRD TASK\r\n\r\n   std::cout<<autonomous_task_manager; \r\n   /* OUTPUT\r\n    SENSING\r\n    PRINTING\r\n    CLOCK\r\n   */ \r\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"congratulations-",children:"Congratulations! \ud83c\udf89"}),"\n",(0,s.jsx)(e.p,{children:"You finished the tutorial! Now you can start creating task in your code."}),"\n",(0,s.jsxs)(e.p,{children:["For more information check the ",(0,s.jsx)(e.a,{href:"/docs/Documentation/TaskManager",children:"TaskManager Documentation."})]})]})}function h(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(c,{...n})}):c(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>o});var s=t(6540);const a={},i=s.createContext(a);function r(n){const e=s.useContext(i);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);