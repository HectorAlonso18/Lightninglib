"use strict";(self.webpackChunklightning_docs=self.webpackChunklightning_docs||[]).push([[1083],{5760:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>x,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var s=r(4848),t=r(8453),i=r(1470),o=r(9365);const l={sidebar_label:"Tank Chassis",sidebar_position:8},a="Tank Chassis",d={id:"Documentation/TankChassis",title:"Tank Chassis",description:"The coordinates needs to be in (inches), orientation in (degrees), velocity units in (inches/seconds) and the acceleration units in (inches/seconds2).",source:"@site/docs/Documentation/TankChassis.md",sourceDirName:"Documentation",slug:"/Documentation/TankChassis",permalink:"/Lightninglib/docs/Documentation/TankChassis",draft:!1,unlisted:!1,editUrl:"https://github.com/HectorAlonso18/Lightninglib/tree/main/docs/Documentation/TankChassis.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_label:"Tank Chassis",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Util",permalink:"/Lightninglib/docs/Documentation/util"},next:{title:"Task Manager",permalink:"/Lightninglib/docs/Documentation/TaskManager"}},c={},h=[{value:"Constructors",id:"constructors",level:2},{value:"No Odometry",id:"no-odometry",level:3},{value:"ADI odometry",id:"adi-odometry",level:3},{value:"V5 Rotation Sensor Odometry",id:"v5-rotation-sensor-odometry",level:3},{value:"PID Functions",id:"pid-functions",level:2},{value:"set_drive_constants()",id:"set_drive_constants",level:3},{value:"set_drive_exit_conditions()",id:"set_drive_exit_conditions",level:3},{value:"set_drive_scale()",id:"set_drive_scale",level:3},{value:"set_turn_constants()",id:"set_turn_constants",level:3},{value:"set_turn_exit_conditions()",id:"set_turn_exit_conditions",level:3},{value:"set_turn_scale()",id:"set_turn_scale",level:3},{value:"set_swing_constants()",id:"set_swing_constants",level:3},{value:"set_swing_exit_conditions()",id:"set_swing_exit_conditions",level:3},{value:"set_swing_scale()",id:"set_swing_scale",level:3},{value:"Motion Functions",id:"motion-functions",level:2},{value:"move_velocity()",id:"move_velocity",level:3},{value:"move_voltage()",id:"move_voltage",level:3},{value:"move()",id:"move",level:3},{value:"drive_to_point()",id:"drive_to_point",level:3},{value:"Using custom PID controllers and inches units.",id:"using-custom-pid-controllers-and-inches-units",level:4},{value:"Using custom PID controllers and okapi units.",id:"using-custom-pid-controllers-and-okapi-units",level:4},{value:"Using <code>drive_pid</code> , <code>turn_pid</code> and inches units.",id:"using-drive_pid--turn_pid-and-inches-units",level:4},{value:"Using <code>drive_pid</code> , <code>turn_pid</code> and okapi units.",id:"using-drive_pid--turn_pid-and-okapi-units",level:4},{value:"follow_path()",id:"follow_path",level:3},{value:"Using custom PID.",id:"using-custom-pid",level:4},{value:"Using <code>drive_pid</code> and <code>turn_pid</code>",id:"using-drive_pid-and-turn_pid",level:4},{value:"move_with_motion_profile()",id:"move_with_motion_profile",level:3},{value:"raw_drive_distance()",id:"raw_drive_distance",level:3},{value:"Using inches.",id:"using-inches",level:4},{value:"Using okapi units.",id:"using-okapi-units",level:4},{value:"drive_distance()",id:"drive_distance",level:3},{value:"Using custom PIDs and units of inches and degrees.",id:"using-custom-pids-and-units-of-inches-and-degrees",level:4},{value:"Using custom PIDs and okapi units.",id:"using-custom-pids-and-okapi-units",level:4},{value:"Using <code>drive_pid</code> , <code>turn_pid</code> and units of inches and degrees.",id:"using-drive_pid--turn_pid-and-units-of-inches-and-degrees",level:4},{value:"Using <code>drive_pid</code> , <code>turn_pid</code> and okapi units",id:"using-drive_pid--turn_pid-and-okapi-units-1",level:4},{value:"turn_absolute()",id:"turn_absolute",level:3},{value:"Using custom <code>PID</code> and units of degrees.",id:"using-custom-pid-and-units-of-degrees",level:4},{value:"Using custom <code>PID</code> and okapi units.",id:"using-custom-pid-and-okapi-units",level:4},{value:"Using <code>turn_pid</code> and units of degrees",id:"using-turn_pid-and-units-of-degrees",level:4},{value:"Using <code>turn_pid</code> and okapi units",id:"using-turn_pid-and-okapi-units",level:4},{value:"turn_relative()",id:"turn_relative",level:3},{value:"Using custom <code>PID</code> and units of degrees.",id:"using-custom-pid-and-units-of-degrees-1",level:4},{value:"Using custom <code>PID</code> and okapi units",id:"using-custom-pid-and-okapi-units-1",level:4},{value:"Using <code>turn_pid</code> and units of degrees",id:"using-turn_pid-and-units-of-degrees-1",level:4},{value:"Using <code>turn_pid</code> and okapi units",id:"using-turn_pid-and-okapi-units-1",level:4},{value:"swing_turn_absolute()",id:"swing_turn_absolute",level:3},{value:"Using custom <code>PID</code> and units of degrees",id:"using-custom-pid-and-units-of-degrees-2",level:4},{value:"Using custom <code>PID</code> and okapi units",id:"using-custom-pid-and-okapi-units-2",level:4},{value:"Using <code>swing_pid</code> and units of degrees",id:"using-swing_pid-and-units-of-degrees",level:4},{value:"Using <code>swing_pid</code> and okapi units",id:"using-swing_pid-and-okapi-units",level:4},{value:"swing_turn_relative()",id:"swing_turn_relative",level:3},{value:"Using custom <code>PID</code> and units of degrees",id:"using-custom-pid-and-units-of-degrees-3",level:4},{value:"Using custom <code>PID</code> and okapi units",id:"using-custom-pid-and-okapi-units-3",level:4},{value:"Using <code>swing_pid</code> and units of degrees",id:"using-swing_pid-and-units-of-degrees-1",level:4},{value:"Using <code>swing_pid</code> and okapi units",id:"using-swing_pid-and-okapi-units-1",level:4},{value:"stop()",id:"stop",level:3},{value:"Driver functions",id:"driver-functions",level:2},{value:"arcade()",id:"arcade",level:3},{value:"arcade_exponential()",id:"arcade_exponential",level:3},{value:"tank()",id:"tank",level:3},{value:"Telemetry Functions",id:"telemetry-functions",level:2},{value:"track_pose()",id:"track_pose",level:3},{value:"set_coordinates",id:"set_coordinates",level:3},{value:"set_odometry_rotation()",id:"set_odometry_rotation",level:3},{value:"set_orientation()",id:"set_orientation",level:3},{value:"get_odometry_rotation()",id:"get_odometry_rotation",level:3},{value:"get_pose()",id:"get_pose",level:3},{value:"get_position()",id:"get_position",level:3},{value:"get_x()",id:"get_x",level:3},{value:"get_y()",id:"get_y",level:3},{value:"get_orientation()",id:"get_orientation",level:3},{value:"get_ForwardTracker_position()",id:"get_forwardtracker_position",level:3},{value:"get_SideWays_position()",id:"get_sideways_position",level:3},{value:"get_average_motors_position_deg()",id:"get_average_motors_position_deg",level:3},{value:"get_left_position_deg()",id:"get_left_position_deg",level:3},{value:"get_right_position_deg()",id:"get_right_position_deg",level:3},{value:"get_average_motors_position_inches();",id:"get_average_motors_position_inches",level:3},{value:"get_left_position_inches();",id:"get_left_position_inches",level:3},{value:"get_right_position_inches()",id:"get_right_position_inches",level:3},{value:"get_actual_rpm()",id:"get_actual_rpm",level:3},{value:"get_actual_velocity()",id:"get_actual_velocity",level:3},{value:"get_current_index()",id:"get_current_index",level:3},{value:"reset_odometry()",id:"reset_odometry",level:3},{value:"reset_IMU()",id:"reset_imu",level:3},{value:"tare_motors_position()",id:"tare_motors_position",level:3},{value:"Configuration Functions",id:"configuration-functions",level:2},{value:"set_brake()",id:"set_brake",level:3},{value:"set_wheels_diameter()",id:"set_wheels_diameter",level:3},{value:"set_center_distance()",id:"set_center_distance",level:3},{value:"set_gearing()",id:"set_gearing",level:3},{value:"set_gear_ratio()",id:"set_gear_ratio",level:3},{value:"set_max_rpm()",id:"set_max_rpm",level:3},{value:"set_max_velocity()",id:"set_max_velocity",level:3},{value:"set_max_accel()",id:"set_max_accel",level:3},{value:"get_max_rpm()",id:"get_max_rpm",level:3},{value:"get_max_velocity()",id:"get_max_velocity",level:3},{value:"get_max_accel()",id:"get_max_accel",level:3},{value:"get_wheels_diameter()",id:"get_wheels_diameter",level:3},{value:"get_center_distance()",id:"get_center_distance",level:3},{value:"get_gearing()",id:"get_gearing",level:3},{value:"get_encoders_units()",id:"get_encoders_units",level:3},{value:"get_actual_brake()",id:"get_actual_brake",level:3},{value:"get_gear_ratio()",id:"get_gear_ratio",level:3},{value:"Auto setters",id:"auto-setters",level:2},{value:"auto_set_max_velocity_with_position()",id:"auto_set_max_velocity_with_position",level:3},{value:"autoset_max_vel_accel()",id:"autoset_max_vel_accel",level:3},{value:"auto_set_max_rpm()",id:"auto_set_max_rpm",level:3}];function u(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",hr:"hr",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"tank-chassis",children:"Tank Chassis"}),"\n",(0,s.jsxs)(n.admonition,{type:"warning",children:[(0,s.jsxs)(n.p,{children:["The coordinates needs to be in ",(0,s.jsx)(n.strong,{children:"(inches)"}),", orientation in ",(0,s.jsx)(n.strong,{children:"(degrees)"}),", velocity units in ",(0,s.jsx)(n.strong,{children:"(inches/seconds)"})," and the acceleration units in ",(0,s.jsxs)(n.strong,{children:["(inches/seconds",(0,s.jsx)("sup",{children:"2"}),")"]}),"."]}),(0,s.jsxs)(n.p,{children:["Otherwise, the code will ",(0,s.jsx)(n.strong,{children:"not work"})," as expected."]})]}),"\n",(0,s.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsx)(n.h3,{id:"no-odometry",children:"No Odometry"}),"\n",(0,s.jsx)(n.p,{children:"TankChassis constructor  without odometry."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_contructor_no_odometry",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" TankChassis(tank_odom_e_t odom_config,\r\n const std::initializer_list<std::int8_t>& left_side_ports, \r\n const std::initializer_list<std::int8_t>&right_side_ports, \r\n const char gyro_port, const pros::motor_gearset_e_t gearset, \r\n float wheel_diameter, float gear_ratio);\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"odom_config"})}),(0,s.jsx)(n.td,{children:"What odometry configuration the user want. (This constructor is designated for chassis without odometry system)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"left_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the left motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"right_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the right motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gyro_port"})}),(0,s.jsx)(n.td,{children:"The IMU port."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gearset"})}),(0,s.jsx)(n.td,{children:"What is the cartridge of you drivetrain (blue,green, red)?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"wheel_diameter"})}),(0,s.jsx)(n.td,{children:"What is the side of the drivetrain wheels ?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gear_ratio"})}),(0,s.jsxs)(n.td,{children:["What is the gear ratio (Is the result of Driven/Driving, Drive",":Driving",")?"]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"adi-odometry",children:"ADI odometry"}),"\n",(0,s.jsx)(n.p,{children:"TankChassis constructor with odometry using ADI encoders (The red ones)."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_contructor_ADI_odometry",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example 1",value:"example"},{label:"Example 2",value:"example_2"},{label:"Example 3",value:"example_3"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" TankChassis(tank_odom_e_t odom_config, \r\n const std::initializer_list<std::int8_t>& left_side_ports, \r\n const std::initializer_list<std::int8_t>&right_side_ports, \r\n const char gyro_port, const pros::motor_gearset_e_t gearset, \r\n float wheel_diameter, \r\n float gear_ratio,\r\n const std::vector<int>& Encoder_Forward_Tracker_ports, \r\n const float  Forward_Tracker_diameter, \r\n const float  Forward_Tracker_distance_to_center,\r\n const std::vector<int>&Encoder_SideWays_Tracker_ports,\r\n const float SideWays_Tracker_wheel_diameter, \r\n const float SideWays_Tracker_distance_to_center);\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using just ONE tracking wheel!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ADI_ONE_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter in inches\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\n{-1,-2}, //Forward ADI ENCODER PORTS (using a negative number will reverse it!)\r\n2.507, //Forward tracking wheel  diameter in inches\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n{-1,-1},//SIDEWAYS ADI ENCODER PORTS (using a negative number will reverse it!), setting -1,-1 would cancel the tracker!\r\n0, //Sideways tracking wheel  diameter in inches\r\n0); //Sideways that exist between the forward tracker and the robot rotation center.\r\n\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example_2",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using TWO tracking wheels!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ADI_TWO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n{-1,-2}, //Forward ADI ENCODER PORTS (using a negative number will reverse it!)\r\n2.507, //Forward tracking wheel  diameter\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n{-3,-4},//SIDEWAYS ADI ENCODER PORTS (using a negative number will reverse it!), setting -1,-1 would cancel the tracker!\r\n2.507, //Sideways tracking wheel  diameter\r\n1.783); //Distance that exist between the Sideways tracker and the robot rotation center.\r\n\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example_3",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using TWO ROTATED tracking wheels!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ADI_TWO_ROTATED_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\n{-1,-2}, //Forward ADI ENCODER PORTS (using a negative number will reverse it!)\r\n2.507, //Forward tracking wheel  diameter\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n{-3,-4},//SIDEWAYS ADI ENCODER PORTS (using a negative number will reverse it!), setting -1,-1 would cancel the tracker!\r\n2.507, //Sideways tracking wheel  diameter\r\n1.783); //Distance that exist between the Sideways tracker and the robot rotation center.\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"odom_config"})}),(0,s.jsxs)(n.td,{children:["what odometry configuration the user want. (This constructor is designated for chassis with ",(0,s.jsx)(n.strong,{children:"ADI encoder odometry"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"left_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the left motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"right_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the right motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gyro_port"})}),(0,s.jsx)(n.td,{children:"The IMU port."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gearset"})}),(0,s.jsx)(n.td,{children:"What is the cartridge of you drivetrain (blue,green, red)?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"wheel_diameter"})}),(0,s.jsxs)(n.td,{children:["What is the side of the drivetrain wheels in ",(0,s.jsx)(n.strong,{children:"inches"}),"?"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gear_ratio"})}),(0,s.jsxs)(n.td,{children:["What is the gear ratio (Is the result of Driven/Driving, Drive",":Driving",")?"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Encoder_Forward_Tracker_ports"})}),(0,s.jsxs)(n.td,{children:["Forward ADI ENCODER PORTS ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"!"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Forward_Tracker_diameter"})}),(0,s.jsxs)(n.td,{children:["The wheel diameter of your forward tracker ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Forward_Tracker_distance_to_center"})}),(0,s.jsxs)(n.td,{children:["the distance that exist between the forward tracker  and the robot center point ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Encoder_SideWays_Tracker_ports"})}),(0,s.jsxs)(n.td,{children:["//SIDEWAYS ADI ENCODER PORTS ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),", setting -1,-1 would cancel the tracker!"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Sideways_Tracker_diameter"})}),(0,s.jsxs)(n.td,{children:["The wheel diameter of your sideways tracker ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Sidways_Tracker_distance_to_center"})}),(0,s.jsxs)(n.td,{children:["the distance that exist between the sideways tracker  and the robot center point ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"v5-rotation-sensor-odometry",children:"V5 Rotation Sensor Odometry"}),"\n",(0,s.jsx)(n.p,{children:"TankChassis constructor with odometry using the V5 rotation sensors."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_contructor_v5_odometry",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example 1",value:"example"},{label:"Example 2",value:"example_2"},{label:"Example 3",value:"example_3"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" TankChassis(tank_odom_e_t odom_config, \r\n const std::initializer_list<std::int8_t>& left_side_ports, \r\n const std::initializer_list<std::int8_t>&right_side_ports, \r\n const char gyro_port, const pros::motor_gearset_e_t gearset, \r\n float wheel_diameter, \r\n float gear_ratio,\r\n const int Rotation_Forward_Tracker_port, \r\n const float  Forward_Tracker_diameter, \r\n const float  Forward_Tracker_distance_to_center,\r\n const int Rotation_SideWays_Tracker_port,\r\n const float SideWays_Tracker_wheel_diameter, \r\n const float SideWays_Tracker_distance_to_center);\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using just ONE tracking wheel!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ROTATION_ONE_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\n1, //Forward V5 ROTATION SENSOR PORT (using a negative number will reverse it!), \r\n2.507, //Forward tracking wheel  diameter\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n0,//Sideways V5 ROTATION SENSOR PORT (using a negative number will reverse it!), setting 0 would cancel the tracker!\r\n0, //Sideways tracking wheel  diameter\r\n0 //Distance that exist between the Sideways tracker and the robot rotation center.\r\n); \n"})})}),(0,s.jsx)(o.A,{value:"example_2",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using TWO tracking wheels!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ROTATION_TWO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n1, //Forward V5 ROTATION SENSOR PORT (using a negative number will reverse it!)\r\n2.507, //Forward tracking wheel  diameter\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n2,//Sideways V5 ROTATION SENSOR PORT (using a negative number will reverse it!), setting 0 would cancel the tracker!\r\n2.507, //Sideways tracking wheel  diameter\r\n1.783); //Distance that exist between the Sideways tracker and the robot rotation center.\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example_3",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{1,4}",children:"//Chassis declaration using TWO ROTATED tracking wheels!!!!!! \r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::ROTATION_TWO_ROTATED_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333, //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\n1, //Forward V5 ROTATION SENSOR PORT (using a negative number will reverse it!)\r\n2.507, //Forward tracking wheel  diameter\r\n1.783, //Distance that exist between the forward tracker and the robot rotation center.\r\n\r\n2,//Sideways V5 ROTATION SENSOR PORT (using a negative number will reverse it!), setting 0 would cancel the tracker!\r\n2.507, //Sideways tracking wheel  diameter\r\n1.783); //Distance that exist between the Sideways tracker and the robot rotation center.\r\n\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"odom_config"})}),(0,s.jsxs)(n.td,{children:["what odometry configuration the user want. (This constructor is designated for chassis with ",(0,s.jsx)(n.strong,{children:"ADI encoder odometry"}),")."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"left_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the left motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"right_side_ports"})}),(0,s.jsxs)(n.td,{children:["A vector/list of the right motors ports of the drivetrain ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gyro_port"})}),(0,s.jsx)(n.td,{children:"The IMU port."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gearset"})}),(0,s.jsx)(n.td,{children:"What is the cartridge of you drivetrain (blue,green, red)?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"wheel_diameter"})}),(0,s.jsx)(n.td,{children:"What is the side of the drivetrain wheels ?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gear_ratio"})}),(0,s.jsxs)(n.td,{children:["What is the gear ratio (Is the result of Driven/Driving, Drive",":Driving",")?"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Rotation_Forward_Tracker_port"})}),(0,s.jsxs)(n.td,{children:["Forward V5 ROTATION SENSOR PORT ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"!"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Forward_Tracker_diameter"})}),(0,s.jsxs)(n.td,{children:["The wheel diameter of your forward tracker ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Forward_Tracker_distance_to_center"})}),(0,s.jsxs)(n.td,{children:["The distance that exist between the forward tracker  and the robot center point ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Rotation_SideWays_Tracker_port"})}),(0,s.jsxs)(n.td,{children:["Sideways V5 ROTATION SENSOR PORT ",(0,s.jsx)(n.strong,{children:"(using a negative number will reverse it!)"}),"!,setting 0 would cancel the tracker!"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Sideways_Tracker_diameter"})}),(0,s.jsxs)(n.td,{children:["The wheel diameter of your sideways tracker ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Sidways_Tracker_distance_to_center"})}),(0,s.jsxs)(n.td,{children:["The distance that exist between the sideways tracker  and the robot center point ",(0,s.jsx)(n.strong,{children:"(must to be in inches)"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"pid-functions",children:"PID Functions"}),"\n",(0,s.jsx)(n.h3,{id:"set_drive_constants",children:"set_drive_constants()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"drive_pid"})," constants for the Drive ",(0,s.jsx)(n.code,{children:"PID"})," controller."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_drive_constants",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_drive_constants(float kp , float ki , float kd, float max, float scale, float integral_power_limit,float derivative_tolerance); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kp"})}),(0,s.jsx)(n.td,{children:"Proportional constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ki"})}),(0,s.jsx)(n.td,{children:"Integral constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kd"})}),(0,s.jsx)(n.td,{children:"Derivative constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max"})}),(0,s.jsx)(n.td,{children:"PID max output."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"PID scale."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"integral_power_limit"})}),(0,s.jsx)(n.td,{children:"The Integral_power_limit."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"derivative_tolerance"})}),(0,s.jsx)(n.td,{children:"How much the derivative would affect?."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_drive_exit_conditions",children:"set_drive_exit_conditions()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"drive_pid"})," exit conditions, conditions that would make that Drive ",(0,s.jsx)(n.code,{children:"PID"})," controller stops"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_drive_exit",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_drive_exit_conditions(float error_tolerance, float jump_time_msec, float stop_time_msec); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{15}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_drive_scale",children:"set_drive_scale()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"drive_pid"})," scale."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_drive_scale",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_drive_scale(const float scale); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{19}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n    /*\r\n    Doing something...\r\n    */\r\n    my_chassis.set_drive_scale(.5); //Reducing the PID output. Using just 50% of the power. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_turn_constants",children:"set_turn_constants()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"turn_pid"})," constants for the Turn ",(0,s.jsx)(n.code,{children:"PID"})," controller."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_turn_constants",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_turn_constants(float kp , float ki , float kd, float max, float scale, float integral_power_limit,float derivative_tolerance); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kp"})}),(0,s.jsx)(n.td,{children:"Proportional constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ki"})}),(0,s.jsx)(n.td,{children:"Integral constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kd"})}),(0,s.jsx)(n.td,{children:"Derivative constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max"})}),(0,s.jsx)(n.td,{children:"PID max output."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"PID scale."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"integral_power_limit"})}),(0,s.jsx)(n.td,{children:"The Integral_power_limit."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"derivative_tolerance"})}),(0,s.jsx)(n.td,{children:"How much the derivative would affect?."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_turn_exit_conditions",children:"set_turn_exit_conditions()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"turn_pid"})," exit conditions, conditions that would make that Turn ",(0,s.jsx)(n.code,{children:"PID"})," controller stops"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_turn_exit",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_turn_exit_conditions(float error_tolerance, float jump_time_msec, float stop_time_msec); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{15}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_turn_scale",children:"set_turn_scale()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"turn_pid"})," scale."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_turn_scale",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_turn_scale(const float scale); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{19}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    /*\r\n    Doing something...\r\n    */\r\n    my_chassis.set_turn_scale(.5); //Reducing the PID output. Using just 50% of the power. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_swing_constants",children:"set_swing_constants()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"swing_pid"})," constants for the Swing ",(0,s.jsx)(n.code,{children:"PID"})," controller."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_swing_constants",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_swing_constants(float kp , float ki , float kd, float max, float scale, float integral_power_limit,float derivative_tolerance); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kp"})}),(0,s.jsx)(n.td,{children:"Proportional constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"ki"})}),(0,s.jsx)(n.td,{children:"Integral constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kd"})}),(0,s.jsx)(n.td,{children:"Derivative constant."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"max"})}),(0,s.jsx)(n.td,{children:"PID max output."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"PID scale."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"integral_power_limit"})}),(0,s.jsx)(n.td,{children:"The Integral_power_limit."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"derivative_tolerance"})}),(0,s.jsx)(n.td,{children:"How much the derivative would affect?."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_swing_exit_conditions",children:"set_swing_exit_conditions()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"swing_pid"})," exit conditions, conditions that would make that Swing ",(0,s.jsx)(n.code,{children:"PID"})," controller stops"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_swing_exit",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_swing_exit_conditions(float error_tolerance, float jump_time_msec, float stop_time_msec); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{15}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_swing_scale",children:"set_swing_scale()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the ",(0,s.jsx)(n.code,{children:"swing_pid"})," scale."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_pid_functions_swing_scale",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_swing_scale(const float scale); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{19}",children:"//Chassis declaration\r\nlightning::TankChassis my_chassis( \r\n //Odometry configuration\r\nlightning::tank_odom_e_t::NO_ODOM,\r\n//Declaration of drivetrain motors\r\n{-11,-12,-13,-14}, //Left side ports (using a negative number will reverse it!)\r\n{20,19,18,17},    //Right side ports (using a negative number will reverse it!)\r\n5,   //IMU port \r\npros::E_MOTOR_GEAR_600, //Which motor cartride are you using, blue,red,green? \r\n3.25, //Wheel Diameter\r\n1.3333); //what is the gear ratio (Is the result of Driven/Driving, Drive:Driving)\r\n\r\nvoid autonomous(){\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n    /*\r\n    Doing something...\r\n    */\r\n    my_chassis.set_swing_scale(.5); //Reducing the PID output. Using just 50% of the power. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"error_tolerance"})}),(0,s.jsx)(n.td,{children:"The error tolerance for the controller."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"jump_time_msec"})}),(0,s.jsx)(n.td,{children:"The jump time limit in milliseconds."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"stop_time_msec"})}),(0,s.jsx)(n.td,{children:"The stop time limit in milliseconds. If more than this time elapses,the PID controller output will be forced to zero."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"motion-functions",children:"Motion Functions"}),"\n",(0,s.jsxs)(n.p,{children:["Some motion functions uses ",(0,s.jsx)(n.strong,{children:"okapi units"})," to give more variety."]}),"\n",(0,s.jsxs)(n.p,{children:["To learn more about okapi units, check ",(0,s.jsx)(n.a,{href:"https://okapilib.github.io/OkapiLib/md_docs_api_units.html",children:"here"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"move_velocity",children:"move_velocity()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the velocity for the motors chassis."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This velocity corresponds to different actual speeds depending on the gearset\r\nused for the chassis. This results in a range of +-100 for E_MOTOR_GEARSET_36,\r\n+-200 for E_MOTOR_GEARSET_18, and +-600 for E_MOTOR_GEARSET_6. The velocity\r\nis held with PID to ensure consistent speed, as opposed to setting the\r\nmotor's voltage."})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_functions_move_velocity",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void move_velocity(const int rpm); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"\r\nvoid autonomous(){\r\n    my_chassis.move_velocity(500); //Running the Robot at 500 RPM. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"rpm"})}),(0,s.jsx)(n.td,{children:"The new motors chassis velocity from +-100, +-200, or +-600 depending on the motor's gearset"})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"move_voltage",children:"move_voltage()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the output voltage for the motors chassis from -12000 to 12000 in millivolts."}),"\n",(0,s.jsx)(n.p,{children:"This function uses the following values of errno when an error state is reached:"}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_functions_move_voltage",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void move_voltage(const int voltage_mv);\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"\r\n\r\nvoid autonomous(){\r\n    my_chassis.move_voltage(8000); //\r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"voltage_mv"})}),(0,s.jsx)(n.td,{children:"The new voltage value from -12000 to 12000 millivolts."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"move",children:"move()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the voltage for the motors chassis from -127 to 127."}),"\n",(0,s.jsx)(n.p,{children:"This is designed to map easily to the input from the controller's analog stick for simple opcontrol use."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_functions_move",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void move(const int voltage); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{14}",children:"\r\nvoid autonomous(){\r\n    my_chassis.move(-127);\r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"voltage"})}),(0,s.jsx)(n.td,{children:"The new motors chassis voltage from -127 to 127."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"drive_to_point",children:"drive_to_point()"}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot from a starting point to a target point. ",(0,s.jsx)(n.strong,{children:"Different versions of this function are available below."})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The robot ",(0,s.jsx)(n.strong,{children:"MUST"})," to be facing the target point with the front or back side of the chassis."]})}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-pid-controllers-and-inches-units",children:"Using custom PID controllers and inches units."}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot from a starting point to a target point using custom ",(0,s.jsx)(n.code,{children:"PID"})," controller (Created for the user) and in ",(0,s.jsx)(n.strong,{children:"inches units"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_to_point_custom_pid_inches",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_to_point(PID& drive_controller, PID& turn_controller, std::vector<double> target, bool reverse); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{24}",children:"\r\nvoid autonomous(){\r\n\r\n    lightning::PID drive_controller (5,.001,2,10,1); \r\n    drive_controller.set_stop_time(2000);\r\n    drive_controller.set_error_tolerance(1); \r\n    drive_controller.set_derivative_tolerance(50); \r\n    drive_controller.set_integral_power_limit(100); \r\n    drive_controller.set_jump_time(500);\r\n    drive_controller.set_max(600); \r\n    drive_controller.set_min(0); \r\n\r\n\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n\r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.drive_to_point(drive_controller,turn_controller, {0,24}, false); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"drive_controller"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the forward and backward movements of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_controller"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for turns."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target"})}),(0,s.jsxs)(n.td,{children:["The target point ",(0,s.jsx)(n.code,{children:"{x,y}"})," in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"reverse"})}),(0,s.jsxs)(n.td,{children:["The direction. ",(0,s.jsx)(n.code,{children:"true"})," if you want to go backwards, ",(0,s.jsx)(n.code,{children:"false"})," if you want to go forward."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-pid-controllers-and-okapi-units",children:"Using custom PID controllers and okapi units."}),"\n",(0,s.jsx)(n.p,{children:"Drives the robot from a starting point to a target point using custom PID controller (Created for the user) using okapi units."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_to_point_custom_pid_okapi_units",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_to_point(PID& drive_controller, PID& turn_controller, std::vector<okapi::QLength> target, bool reverse); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{24}",children:"\r\nvoid autonomous(){\r\n\r\n    lightning::PID drive_controller (5,.001,2,10,1); \r\n    drive_controller.set_stop_time(2000);\r\n    drive_controller.set_error_tolerance(1); \r\n    drive_controller.set_derivative_tolerance(50); \r\n    drive_controller.set_integral_power_limit(100); \r\n    drive_controller.set_jump_time(500);\r\n    drive_controller.set_max(600); \r\n    drive_controller.set_min(0); \r\n\r\n\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n\r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.drive_to_point(drive_controller,turn_controller, {0_in,24_in}, false); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"drive_controller"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the forward and backward movements of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_controller"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for turns."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target"})}),(0,s.jsxs)(n.td,{children:["The target point ",(0,s.jsx)(n.code,{children:"{x,y}"})," in ",(0,s.jsx)(n.strong,{children:"okapi units"}),",for example could be in inches, centimeters, meters, etc."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"reverse"})}),(0,s.jsxs)(n.td,{children:["The direction. ",(0,s.jsx)(n.code,{children:"true"})," if you want to go backwards, ",(0,s.jsx)(n.code,{children:"false"})," if you want to go forward."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-drive_pid--turn_pid-and-inches-units",children:["Using ",(0,s.jsx)(n.code,{children:"drive_pid"})," , ",(0,s.jsx)(n.code,{children:"turn_pid"})," and inches units."]}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot from a starting point to a target point using the ",(0,s.jsx)(n.code,{children:"Drive"})," and ",(0,s.jsx)(n.code,{children:"Turn"})," ",(0,s.jsx)(n.code,{children:"PID"})," ."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_to_point_pid_inches",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_to_point(std::vector<double>target, bool reverse); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{9}",children:"\r\nvoid autonomous(){\r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    my_chassis.drive_to_point({0,24},false); //USING THE my_chassis drive and turn pid! \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target"})}),(0,s.jsxs)(n.td,{children:["The target point ",(0,s.jsx)(n.code,{children:"{x,y}"})," in ",(0,s.jsx)(n.strong,{children:"inches"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"reverse"})}),(0,s.jsxs)(n.td,{children:["The direction. ",(0,s.jsx)(n.code,{children:"true"})," if you want to go backwards, ",(0,s.jsx)(n.code,{children:"false"})," if you want to go forward."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-drive_pid--turn_pid-and-okapi-units",children:["Using ",(0,s.jsx)(n.code,{children:"drive_pid"})," , ",(0,s.jsx)(n.code,{children:"turn_pid"})," and okapi units."]}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot from a starting point to a target point using the ",(0,s.jsx)(n.code,{children:"Drive"})," and ",(0,s.jsx)(n.code,{children:"Turn"})," ",(0,s.jsx)(n.code,{children:"PID"})," using ",(0,s.jsx)(n.strong,{children:"okapi units"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_to_point_pid_okapi_units",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_to_point(std::vector<okapi::QLength> target, bool reverse); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{9}",children:"\r\nvoid autonomous(){\r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    my_chassis.drive_to_point({0_in,24_in},false); //USING THE my_chassis drive and turn pid! \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target"})}),(0,s.jsxs)(n.td,{children:["The target point ",(0,s.jsx)(n.code,{children:"{x,y}"})," in ",(0,s.jsx)(n.strong,{children:"okapi units"}),"  for example could be in inches, centimeters, meters, etc."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"reverse"})}),(0,s.jsxs)(n.td,{children:["The direction. ",(0,s.jsx)(n.code,{children:"true"})," if you want to go backwards, ",(0,s.jsx)(n.code,{children:"false"})," if you want to go forward."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"follow_path",children:"follow_path()"}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot to follow a pre-computaded path using ",(0,s.jsx)(n.strong,{children:"pure pursuit"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Different versions of this function are available below."})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["You can see more information about ",(0,s.jsx)(n.strong,{children:"pure pursuit"}),"  ",(0,s.jsx)(n.a,{href:"https://la.mathworks.com/help/nav/ug/pure-pursuit-controller.html",children:"here"})]})}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-pid",children:"Using custom PID."}),"\n",(0,s.jsx)(n.p,{children:"Drives the robot to follow a pre-computaded path using PID controllers created for the user."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_follow_path_custom_pid",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void follow_path(Path &path, PID& drive_controller,PID&turn_controller, float look_ahead_distance); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{32}",children:"\r\nlightning::Path goal_path ({0,0,24,48},{0,24,48,64},true,3);  //PATH\r\n\r\nvoid autonomous(){\r\n    //Path stuff\r\n    goal_path.upgrade()\r\n    goal_path.set_max_lineal_velocity(10); //10 (inches/second).\r\n    goal_path.make_cals(); \r\n    pros::delay(10); //giving some time to make the calculations. \r\n    //////////////////////////////////////////////\r\n\r\n    //Tunning Custom PID controllers \r\n    lightning::PID drive_controller (5,.001,2,10,1); \r\n    drive_controller.set_stop_time(2000);\r\n    drive_controller.set_error_tolerance(1); \r\n    drive_controller.set_derivative_tolerance(50); \r\n    drive_controller.set_integral_power_limit(100); \r\n    drive_controller.set_jump_time(500);\r\n    drive_controller.set_max(600); \r\n    drive_controller.set_min(0); \r\n\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n    ////////////////////////////////////////////////////////////////////\r\n    \r\n    my_chassis.follow_path(goal_path,drive_controller,turn_controller,12); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"path"})}),(0,s.jsx)(n.td,{children:"A desired path created by the Path class."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"drive_controller"})}),(0,s.jsx)(n.td,{children:"A PID controller designated for controlling the forward and backward movements of the robot."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_controller"})}),(0,s.jsx)(n.td,{children:"A PID controller designated for turns."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"look_ahead_distanc"})}),(0,s.jsxs)(n.td,{children:["The look ahead distance. It its important for the pure pursuit calculations see more information ",(0,s.jsx)(n.a,{href:"https://la.mathworks.com/help/nav/ug/pure-pursuit-controller.html",children:"here"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-drive_pid-and-turn_pid",children:["Using ",(0,s.jsx)(n.code,{children:"drive_pid"})," and ",(0,s.jsx)(n.code,{children:"turn_pid"})]}),"\n",(0,s.jsxs)(n.p,{children:["Drives the robot to follow a pre-computaded path using the ",(0,s.jsx)(n.code,{children:"Drive"})," and ",(0,s.jsx)(n.code,{children:"Turn"})," PIDS from tank chassis class."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_follow_path_pid",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void follow_path(Path&path,float look_ahead_distance);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{21}",children:"\r\nlightning::Path goal_path ({0,0,24,48},{0,24,48,64},true,3);  //PATH\r\n\r\nvoid autonomous(){\r\n    //Path stuff\r\n    goal_path.upgrade()\r\n    goal_path.set_max_lineal_velocity(10); //10 (inches/second).\r\n    goal_path.make_cals(); \r\n    pros::delay(10); //giving some time to make the calculations. \r\n    //////////////////////////////////////////////\r\n\r\n    //Tunning Drive and turn. \r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    //////////\r\n    \r\n    my_chassis.follow_path(goal_path,12); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"path"})}),(0,s.jsx)(n.td,{children:"A desired path created by the Path class."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"look_ahead_distanc"})}),(0,s.jsxs)(n.td,{children:["The look ahead distance. It its important for the pure pursuit calculations see more information ",(0,s.jsx)(n.a,{href:"https://la.mathworks.com/help/nav/ug/pure-pursuit-controller.html",children:"here"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"move_with_motion_profile",children:"move_with_motion_profile()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the robot using a trapezoidal profile."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_motion_profile",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void move_with_motion_profile(TrapezoidalProfile& profile); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{4}",children:"lightning::TrapezoidalProfile profile (5,1); \r\nvoid autonomous(){\r\n    profile.update(48,.01); // 48 inches , .01 sec\r\n    my_chassis.move_with_motion_profile(test_profile); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"profile"})}),(0,s.jsx)(n.td,{children:"The trapezoidal profile."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"raw_drive_distance",children:"raw_drive_distance()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the robot to a certain distance and velocity in RPM, using the PROS move_absolute function."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsx)(n.p,{children:"A positive distance means that the robot needs to move forward, while a negative distance means that the robot needs to move backwards."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Different versions of this function are available below."})}),"\n",(0,s.jsx)(n.h4,{id:"using-inches",children:"Using inches."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The user needs to set how many inches the robot would move."})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_raw_drive_distance_inches",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void raw_drive_distance(double distance, const int vel_rpm);  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{2,5}",children:"void autonomous(){\r\n    my_chassis.raw_drive_distance(24,300); //Moving the robot 24 inches forward at 300 RPM.\r\n    pros::delay(1500); //Waiting\r\n    my_chassis.stop(); //After 1.5 seconds that robot start moving Stops the chassis. \r\n    my_chassis.raw_drive_distance(-24,300); //Moving the robot 24 inches backwards at 300 RPM. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsx)(n.td,{children:"How many inches do you want that the robot moves? (with a negative distance your robot would go in backwards)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vel_rpm"})}),(0,s.jsx)(n.td,{children:"What would be the drive base motors velocity in RPM?"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"using-okapi-units",children:"Using okapi units."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The user needs to set how many distance the robot would move."})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_raw_drive_distance_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void raw_drive_distance(const okapi::QLength distance, const int vel_rpm); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{2,5,8}",children:"void autonomous(){\r\n    my_chassis.raw_drive_distance(24_in,300); //Moving the robot 24 inches forward at 300 RPM.\r\n    pros::delay(1500); //Waiting\r\n    my_chassis.stop(); //After 1.5 seconds that robot start moving Stops the chassis. \r\n    my_chassis.raw_drive_distance(-24_in,300); //Moving the robot 24 inches backwards at 300 RPM. \r\n    pros::delay(1500); //Waiting\r\n    my_chassis.stop(); //After 1.5 seconds that robot start moving Stops the chassis. \r\n    my_chassis.raw_drive_distance(1_ft,300); //Moving the robot 1 foot forward at 300 RPM. \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["How much distance the robot would move?, Using ",(0,s.jsx)(n.strong,{children:"okapi units"})," (with a negative distance your robot would go in backwards)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"vel_rpm"})}),(0,s.jsx)(n.td,{children:"What would be the drive base motors velocity in RPM?"})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"drive_distance",children:"drive_distance()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the robot to a specified distance using PID controllers."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.mdxAdmonitionTitle,{}),(0,s.jsx)(n.p,{children:"The function will block the program execution until it completes. Once finished, the program will resume and continue running subsequent lines of code."})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Different versions of this function are available below."})}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-pids-and-units-of-inches-and-degrees",children:"Using custom PIDs and units of inches and degrees."}),"\n",(0,s.jsxs)(n.p,{children:["This function controls the robot to move a certain distance using a user-defined ",(0,s.jsx)(n.code,{children:"PID"})," controller for ",(0,s.jsx)(n.strong,{children:"forward"})," and ",(0,s.jsx)(n.strong,{children:"backward"})," movements, while also maintaining alignment using a separate ",(0,s.jsx)(n.code,{children:"PID"})," controller for ",(0,s.jsx)(n.strong,{children:"turns"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_distance_custom_pid_inches_deg",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_distance(PID& drive_control, PID& turn_control, double distance, double target_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{22,23,25,26}",children:"void autonomous(){\r\n    //Tunning Custom PID controllers \r\n    lightning::PID drive_controller (5,.001,2,10,1); \r\n    drive_controller.set_stop_time(2000);\r\n    drive_controller.set_error_tolerance(1); \r\n    drive_controller.set_derivative_tolerance(50); \r\n    drive_controller.set_integral_power_limit(100); \r\n    drive_controller.set_jump_time(500);\r\n    drive_controller.set_max(600); \r\n    drive_controller.set_min(0); \r\n\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    //Running 24 inches in a straight line at a 0-degree orientation.  \r\n    my_chassis.drive_distance(drive_controller,turn_controller,24,0); \r\n\r\n    //Running 48 inches in a straight line at a 0-degree orientation in backwards.\r\n    my_chassis.drive_distance(drive_controller,turn_controller,-48,0); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"drive_control"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the forward and backward movements of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the turns of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["The distance in ",(0,s.jsx)(n.strong,{children:"inches"})," that you want the robot to move (with a negative distance your robot would go in backwards)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in which you want the robot to stay in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"using-custom-pids-and-okapi-units",children:"Using custom PIDs and okapi units."}),"\n",(0,s.jsxs)(n.p,{children:["This function controls the robot to move a certain distance using a user-defined ",(0,s.jsx)(n.code,{children:"PID"})," controller for ",(0,s.jsx)(n.strong,{children:"forward"})," and ",(0,s.jsx)(n.strong,{children:"backward"})," movements, while also maintaining alignment using a separate ",(0,s.jsx)(n.code,{children:"PID"})," controller for ",(0,s.jsx)(n.strong,{children:"turns"}),". ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"This functions uses okapi units"})}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_distance_custom_pid_okapi_units",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_distance(PID& distance_control, PID& turn_controller, \r\nconst okapi::QLength distance, const okapi::QAngle  target_orientation);  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{22,23,25,26}",children:"void autonomous(){\r\n    //Tunning Custom PID controllers \r\n    lightning::PID drive_controller (5,.001,2,10,1); \r\n    drive_controller.set_stop_time(2000);\r\n    drive_controller.set_error_tolerance(1); \r\n    drive_controller.set_derivative_tolerance(50); \r\n    drive_controller.set_integral_power_limit(100); \r\n    drive_controller.set_jump_time(500);\r\n    drive_controller.set_max(600); \r\n    drive_controller.set_min(0); \r\n\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n    ////////////////////////////////////////////////////////////////////\r\n\r\n    //Running 24 inches in a straight line at a 0-degree orientation.  \r\n    my_chassis.drive_distance(drive_controller,turn_controller,24_in,0_deg); \r\n\r\n    //Running 2 tile in a straight line at a 0-radians orientation in backwards.\r\n    my_chassis.drive_distance(drive_controller,turn_controller,-2_tiles,0_rad); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"drive_control"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the forward and backward movements of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["A ",(0,s.jsx)(n.code,{children:"PID"})," controller designated for controlling the turns of the robot."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["The distance in ",(0,s.jsx)(n.strong,{children:"okapi units"})," (inches,centimeters,tiles,etc) that you want the robot to move (with a negative distance your robot would go in backwards)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in which you want the robot to stay in ",(0,s.jsx)(n.strong,{children:"okapi units"})," (radians,degrees)."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-drive_pid--turn_pid-and-units-of-inches-and-degrees",children:["Using ",(0,s.jsx)(n.code,{children:"drive_pid"})," , ",(0,s.jsx)(n.code,{children:"turn_pid"})," and units of inches and degrees."]}),"\n",(0,s.jsxs)(n.p,{children:["This function controls the robot to move a certain distance using the ",(0,s.jsx)(n.code,{children:"drive_pid"})," ,while also maintaining alignment using a ",(0,s.jsx)(n.code,{children:"turn_pid"})," controller for turns. Using units of ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"inches and degrees"})}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_distance_drive_pid,turn_pid,inches_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_distance(const double distance, const double target_orientation);  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{10}",children:"void autonomous(){\r\n    //Tunning Drive and turn. \r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    //Running 24 inches in a straight line at a 0-degree orientation.  \r\n    my_chassis.drive_distance(24,0); \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["The distance in ",(0,s.jsx)(n.strong,{children:"inches"})," that you want the robot to move (with a negative distance your robot would go in backwards)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in which you want the robot to stay in ",(0,s.jsx)(n.strong,{children:"degrees"})]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-drive_pid--turn_pid-and-okapi-units-1",children:["Using ",(0,s.jsx)(n.code,{children:"drive_pid"})," , ",(0,s.jsx)(n.code,{children:"turn_pid"})," and okapi units"]}),"\n",(0,s.jsxs)(n.p,{children:["This function controls the robot to move a certain distance using the ",(0,s.jsx)(n.code,{children:"drive_pid"})," ,while also maintaining alignment using a ",(0,s.jsx)(n.code,{children:"turn_pid"})," controller for turns. Using ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"okapi units"})}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_drive_distance_drive_pid,turn_pid,okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void drive_distance(const okapi::QLength distance, const okapi::QAngle target_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{10}",children:"void autonomous(){\r\n    //Tunning Drive and turn. \r\n    my_chassis.set_drive_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_drive_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    //Running 24 inches in a straight line at a 0-degree orientation.  \r\n    my_chassis.drive_distance(24_in,0_deg); \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["The distance in ",(0,s.jsx)(n.strong,{children:"okapi units"})," (inches,centimeters,tiles,etc) that you want the robot to move (with a negative distance your robot would go in backwards)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in which you want the robot to stay in ",(0,s.jsx)(n.strong,{children:"okapi units"})," (radians,degrees)."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"turn_absolute",children:"turn_absolute()"}),"\n",(0,s.jsxs)(n.p,{children:["Makes the robot turn to a certain orientation using a ",(0,s.jsx)(n.code,{children:"PID"})," controller."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The turning direction is determinated depending of which direction means less travel."})}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-units-of-degrees",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and units of degrees."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_absolute_custom_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_absolute(PID&turn_control,double target_orientation);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{11-13}",children:"void autonomous(){\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.turn_absolute(turn_controller,180); //turning 180 degrees. \r\n    my_chassis.turn_absolute(turn_controller,270); //turning 270 degrees. \r\n    my_chassis.turn_absolute(turn_controller,360); //turning 360 degrees. \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-okapi-units",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and okapi units."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_absolute_custom_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void turn_absolute(PID& turn_control,okapi::QAngle target_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{11-13}",children:"void autonomous(){\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.turn_absolute(turn_controller,180_deg); //turning 180 degrees. \r\n    my_chassis.turn_absolute(turn_controller,270_deg); //turning 270 degrees. \r\n    my_chassis.turn_absolute(turn_controller,3.1415_rad); //turning pi radians = turning 180 degrees.  \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"okapi units"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-turn_pid-and-units-of-degrees",children:["Using ",(0,s.jsx)(n.code,{children:"turn_pid"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_absolute_turn_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_absolute(double target_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning turn_pid\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.turn_absolute(180); //turning 180 degrees. \r\n    my_chassis.turn_absolute(270); //turning 270 degrees. \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-turn_pid-and-okapi-units",children:["Using ",(0,s.jsx)(n.code,{children:"turn_pid"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_absolute_turn_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_absolute(okapi::QAngle target_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6-8}",children:"void autonomous(){\r\n    //Tunning turn_pid\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.turn_absolute(180_deg); //turning 180 degrees. \r\n    my_chassis.turn_absolute(270_deg); //turning 270 degrees. \r\n    my_chassis.turn_absolute(3.1415_rad); //turning pi radians = turning 180 degrees.  \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"okapi units"}),"."]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"turn_relative",children:"turn_relative()"}),"\n",(0,s.jsx)(n.p,{children:"Turns the robot certain number of degrees, positive if the robot needs to turn right or negative if the robot needs to turn left."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The turning direction is determinated depending of which direction means less travel."})}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-units-of-degrees-1",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and units of degrees."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_relative_custom_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_relative(PID&turn_control,double degrees);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{11-13}",children:"void autonomous(){\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.turn_relative(turn_controller,180); //turning 180 degrees. \r\n    my_chassis.turn_relative(turn_controller,90); //turning 90 degrees, current heading 270. \r\n    my_chassis.turn_relative(turn_controller,-90); //turning -90 degrees, current heading 180. \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["How many ",(0,s.jsx)(n.strong,{children:"degrees"})," would turn?"]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-okapi-units-1",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_relative_custom_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void turn_relative(PID& turn_control,okapi::QAngle degrees); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{11-13}",children:"void autonomous(){\r\n    lightning::PID turn_controller (2.5,.001,1,10,1); \r\n    turn_controller.set_stop_time(1000);\r\n    turn_controller.set_error_tolerance(.15); \r\n    turn_controller.set_derivative_tolerance(50); \r\n    turn_controller.set_integral_power_limit(100); \r\n    turn_controller.set_jump_time(250);\r\n    turn_controller.set_max(450); \r\n    turn_controller.set_min(0); \r\n\r\n    my_chassis.turn_relative(turn_controller,180_deg); //turning 180 degrees. \r\n    my_chassis.turn_relative(turn_controller,90_deg); //turning 90 degrees, current heading 270. \r\n    my_chassis.turn_relative(turn_controller,-90_deg); //turning -90 degrees, current heading 180. \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["How many ",(0,s.jsx)(n.strong,{children:"okapi units"})," would turn?"]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-turn_pid-and-units-of-degrees-1",children:["Using ",(0,s.jsx)(n.code,{children:"turn_pid"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_relative_turn_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_relative(double degrees); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning turn_pid\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.turn_relative(180); //turning 180 degrees. \r\n    my_chassis.turn_relative(90); //turning 90 degrees, current heading 270. \r\n    my_chassis.turn_relative(-90); //turning -90 degrees, current heading 180. \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["How many ",(0,s.jsx)(n.strong,{children:"degrees"})," would turn?"]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-turn_pid-and-okapi-units-1",children:["Using ",(0,s.jsx)(n.code,{children:"turn_pid"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_turn_relative_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void turn_relative(okapi::QAngle degrees); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6-8}",children:"void autonomous(){\r\n    //Tunning turn_pid\r\n    my_chassis.set_turn_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_turn_exit_conditions(1,350,2000); \r\n    \r\n    my_chassis.turn_relative(180_deg); //turning 180 degrees. \r\n    my_chassis.turn_relative(90_deg); //turning 90 degrees, current heading 270. \r\n    my_chassis.turn_relative(-90_deg); //turning -90 degrees, current heading 180. \r\n   \r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["How many ",(0,s.jsx)(n.strong,{children:"okapi units"})," would turn?"]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"swing_turn_absolute",children:"swing_turn_absolute()"}),"\n",(0,s.jsxs)(n.p,{children:["Makes the robot turn to a certain orientation using a user-defined PID controller, blocking one side of the drive train, making a ",(0,s.jsx)(n.em,{children:"swing"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The turning direction is determinated depending of which direction means less travel."})}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-units-of-degrees-2",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_turn_custom_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void swing_turn_absolute(PID&swing_control, lightning::swing_direction_e_t swing_direction, \r\ndouble target_orientation, const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{12-13}",children:"void autonomous(){\r\n    //Tunning PID \r\n     lightning::PID swing_controller (2.5,.001,1,10,1); \r\n    swing_controller.set_stop_time(1000);\r\n    swing_controller.set_error_tolerance(.15); \r\n    swing_controller.set_derivative_tolerance(50); \r\n    swing_controller.set_integral_power_limit(100); \r\n    swing_controller.set_jump_time(250);\r\n    swing_controller.set_max(450); \r\n    swing_controller.set_min(0); \r\n    \r\n    my_chassis.swing_turn_absolute (swing_controller, LEFT_SWING, 90);\r\n    my_chassis. swing_turn_absolute (swing_controller, LEFT_SWING, 270);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-okapi-units-2",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_turn_custom_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void swing_turn_absolute( PID& swing_control, lightning::swing_direction_e_t swing_direction, \r\n okapi::QAngle target_orientation, const int opposite_speed_rpm=0);  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{12-13}",children:"void autonomous(){\r\n    //Tunning PID \r\n     lightning::PID swing_controller (2.5,.001,1,10,1); \r\n    swing_controller.set_stop_time(1000);\r\n    swing_controller.set_error_tolerance(.15); \r\n    swing_controller.set_derivative_tolerance(50); \r\n    swing_controller.set_integral_power_limit(100); \r\n    swing_controller.set_jump_time(250);\r\n    swing_controller.set_max(450); \r\n    swing_controller.set_min(0); \r\n    \r\n    my_chassis.swing_turn_absolute (swing_controller, LEFT_SWING, 90_deg);\r\n    my_chassis.swing_turn_absolute (swing_controller, LEFT_SWING, 270_deg);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"okapi units"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-swing_pid-and-units-of-degrees",children:["Using ",(0,s.jsx)(n.code,{children:"swing_pid"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  void swing_turn_absolute(lightning::swing_direction_e_t swing_direction, double target_orientation, \r\n  const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning swing_pid\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 90);\r\n    my_chassis. swing_turn_absolute (LEFT_SWING, 270);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-swing_pid-and-okapi-units",children:["Using ",(0,s.jsx)(n.code,{children:"swing_pid"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void swing_turn_absolute(lightning::swing_direction_e_t swing_direction, \r\n   const okapi::QAngle target_orientation, const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning swing_pid\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 90_deg);\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 270_deg);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"target_orientation"})}),(0,s.jsxs)(n.td,{children:["The target orientation in ",(0,s.jsx)(n.strong,{children:"okapi units"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"swing_turn_relative",children:"swing_turn_relative()"}),"\n",(0,s.jsxs)(n.p,{children:["Makes the robot turn to a certain amount of degrees using a user-defined PID controller, blocking one side of the drive train, making a ",(0,s.jsx)(n.em,{children:"swing"}),". if the robot needs to turn right or negative if the robot needs to turn left."]}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-units-of-degrees-3",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_turn_relative_custom_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void swing_turn_relative(PID& swing_control, lightning::swing_direction_e_t swing_direction, \r\ndouble degrees, const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{12-13}",children:"void autonomous(){\r\n    //Tunning PID \r\n     lightning::PID swing_controller (2.5,.001,1,10,1); \r\n    swing_controller.set_stop_time(1000);\r\n    swing_controller.set_error_tolerance(.15); \r\n    swing_controller.set_derivative_tolerance(50); \r\n    swing_controller.set_integral_power_limit(100); \r\n    swing_controller.set_jump_time(250);\r\n    swing_controller.set_max(450); \r\n    swing_controller.set_min(0); \r\n    \r\n    my_chassis.swing_turn_relative (swing_controller, LEFT_SWING, 90);\r\n    my_chassis.swing_turn_relative (swing_controller, LEFT_SWING, 270);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["how many ",(0,s.jsx)(n.strong,{children:"degrees"})," would turn?."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-custom-pid-and-okapi-units-3",children:["Using custom ",(0,s.jsx)(n.code,{children:"PID"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_turn_relative_custom_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void swing_turn_relative(PID& swing_control, lightning::swing_direction_e_t swing_direction, \r\nokapi::QAngle angle, const int opposide_speed_rpm=0);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{12-13}",children:"void autonomous(){\r\n    //Tunning PID \r\n     lightning::PID swing_controller (2.5,.001,1,10,1); \r\n    swing_controller.set_stop_time(1000);\r\n    swing_controller.set_error_tolerance(.15); \r\n    swing_controller.set_derivative_tolerance(50); \r\n    swing_controller.set_integral_power_limit(100); \r\n    swing_controller.set_jump_time(250);\r\n    swing_controller.set_max(450); \r\n    swing_controller.set_min(0); \r\n    \r\n    my_chassis.swing_turn_relative (swing_controller, LEFT_SWING, 90_deg);\r\n    my_chassis.swing_turn_relative (swing_controller, LEFT_SWING, 270_deg);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_control"})}),(0,s.jsxs)(n.td,{children:["The user ",(0,s.jsx)(n.code,{children:"PID"})," controller."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["how many ",(0,s.jsx)(n.strong,{children:"okapi units"})," would turn?."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-swing_pid-and-units-of-degrees-1",children:["Using ",(0,s.jsx)(n.code,{children:"swing_pid"})," and units of degrees"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_relative_pid_degrees",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  void swing_turn_relative(lightning::swing_direction_e_t swing_direction, double degrees, const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning swing_pid\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 90);\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 270);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["how many ",(0,s.jsx)(n.strong,{children:"degrees"})," would turn?."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h4,{id:"using-swing_pid-and-okapi-units-1",children:["Using ",(0,s.jsx)(n.code,{children:"swing_pid"})," and okapi units"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_swing_relative_pid_okapi",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    void swing_turn_relative(lightning::swing_direction_e_t swing_direction, \r\n    okapi::QAngle angle, const int opposide_speed_rpm=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    //Tunning swing_pid\r\n    my_chassis.set_swing_constants(5 , .001 , 1, 450, 1, 25,50);  \r\n    my_chassis.set_swing_exit_conditions(1,350,2000); \r\n\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 90_deg);\r\n    my_chassis.swing_turn_absolute (LEFT_SWING, 270_deg);\r\n   \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"swing_direction"})}),(0,s.jsx)(n.td,{children:"What side do you want to block?"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"degrees"})}),(0,s.jsxs)(n.td,{children:["how many ",(0,s.jsx)(n.strong,{children:"okapi units"})," would turn?."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"opposide_speed_rpm"})}),(0,s.jsx)(n.td,{children:"You could add power to the blocked side, however is zero by default."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"stop",children:"stop()"}),"\n",(0,s.jsx)(n.p,{children:"Stops the chassis."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_motion_stop",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    void stop(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6,7}",children:"void autonomous(){\r\n    my_chassis.move_voltage(12000); //running at maximum velocity\r\n    pros::delay(2000); //Wait 2 seconds.\r\n    my_chassis.stop(); //Stops chassis\r\n}\r\n\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"driver-functions",children:"Driver functions"}),"\n",(0,s.jsx)(n.p,{children:"For arcade types, you need to provide one of following configurations:"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Arcade configurations"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:" E_TANK_OP_ARCADE_LEFT"})}),(0,s.jsx)(n.td,{children:"Left stick configuration."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"E_TANK_OP_ARCADE_RIGHT"})}),(0,s.jsx)(n.td,{children:"Right stick configuration."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:" E_TANK_OP_ARCADE_DOUBLE"})}),(0,s.jsx)(n.td,{children:"Double stick configuration."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"arcade",children:"arcade()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the chassis in arcade configuration."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"The default configuration is with the left joystick."})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_driver_functions_arcade",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    void arcade(pros::Controller& control, \r\n    const lightning::tank_op_arcade_e_t arcade = lightning::E_TANK_OP_ARCADE_LEFT ,\r\n    const float power_rate=1, const float turn_rate=1); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  pros::Controller master(pros::E_CONTROLLER_MASTER);\r\n  while (true) {\r\n   my_chassis.arcade(master);  //DRIVING ROBOT IN ARCADE MODE \r\n\r\n   pros::delay(lightning::util::DELAY_TIME); \r\n  }\r\n}\r\n\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"control"})}),(0,s.jsx)(n.td,{children:"The control."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"arcade"})}),(0,s.jsx)(n.td,{children:"The tank_op_arcade_e_t to set for the chassis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"power_rate"})}),(0,s.jsx)(n.td,{children:"The rate for the forward and backwards movements (Default is 1)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"turn_rate"})}),(0,s.jsx)(n.td,{children:"The rate for the right and left turns (Default is 1)."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"arcade_exponential",children:"arcade_exponential()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the chassis in an arcade configuration using a smoothing function for more accurate control."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_driver_functions_arcade_exponential",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void arcade_exponential(pros::Controller&control, const lightning::tank_op_arcade_e_t arcade, \r\n                        int n_x, int n_y); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  pros::Controller master(pros::E_CONTROLLER_MASTER);\r\n  while (true) {\r\n   my_chassis.arcade_expontential(master,  E_TANK_OP_ARCADE_LEFT,3,3);  \r\n\r\n   pros::delay(lightning::util::DELAY_TIME); \r\n  }\r\n}\r\n\r\n\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"control"})}),(0,s.jsx)(n.td,{children:"The control."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"arcade"})}),(0,s.jsx)(n.td,{children:"The tank_op_arcade_e_t to set for the chassis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"n_x"})}),(0,s.jsx)(n.td,{children:"The exponential for the joystick x axis."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"n_y"})}),(0,s.jsx)(n.td,{children:"The exponential for the joystick y axis."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"tank",children:"tank()"}),"\n",(0,s.jsx)(n.p,{children:"Drives the chassis in tank configuration."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_driver_functions_tank",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void tank(pros::Controller& control); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void opcontrol() {\r\n  pros::Controller master(pros::E_CONTROLLER_MASTER);\r\n  while (true) {\r\n   my_chassis.tank(master); \r\n\r\n   pros::delay(lightning::util::DELAY_TIME); \r\n  }\r\n}\r\n\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"control"})}),(0,s.jsx)(n.td,{children:"The control."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"telemetry-functions",children:"Telemetry Functions"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["The position is recorded in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]})}),"\n",(0,s.jsx)(n.h3,{id:"track_pose",children:"track_pose()"}),"\n",(0,s.jsx)(n.p,{children:"Tracks and Updates pose. The position and orientation vector (x,y,theta) using odometry."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_track_pose",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void track_pose(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void init_odometry(void*){\r\n    while (1) {\r\n    my_chassis.track_pose();      \r\n  }\r\n}\r\n\r\n\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_coordinates",children:"set_coordinates"}),"\n",(0,s.jsx)(n.p,{children:"Sets the coordinates for the odometry position system."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_set_coordinates",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void set_coordinates(const okapi::QLength x, const okapi::QLength y, const okapi::QAngle orientation_deg);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6}",children:"void initialize() {\r\n my_chassis.reset_odometry();  \r\n pros::delay(3000); \r\n\r\n //Finally, a function to set the initial pose of your robot\r\n my_chassis.set_coordinates(0_in, 0_in, 0_deg);  \r\n\r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"x"})}),(0,s.jsxs)(n.td,{children:["The x coordinate in ",(0,s.jsx)(n.strong,{children:"okapi unit"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"y"})}),(0,s.jsxs)(n.td,{children:["The y coordinate in ",(0,s.jsx)(n.strong,{children:"okapi unit"}),"."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"orientation"})}),(0,s.jsxs)(n.td,{children:["The orientation in ",(0,s.jsx)(n.strong,{children:"okapi unit"}),"."]})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_odometry_rotation",children:"set_odometry_rotation()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the odometry rotation for the odometry position system.\r\nThe odometry rotation is needed for ROTATED configurations like: ",(0,s.jsx)(n.code,{children:"ADI_TWO_ROTATED_ODOM"})," and ",(0,s.jsx)(n.code,{children:"ROTATION_TWO_ROTATED_ODOM"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["For example if your tracking wheels are rotated to -45 degrees, you use ",(0,s.jsx)(n.code,{children:"set_odometry_rotation(-45)"}),";"]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_set_odometry_rotation",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  void set_odometry_rotation(const double angle_of_rotation_deg); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n my_chassis.set_odometry_rotation(angle_of_rotation_deg);  \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"angle_of_rotation_deg"})}),(0,s.jsx)(n.td,{children:"The angle of rotation in degrees."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_orientation",children:"set_orientation()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the robot\xb4s absolute orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_set_orientation",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void set_orientation(okapi::QAngle current_orientation); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6}",children:"void initialize() {\r\n\r\n my_chassis.set_orientation(0_deg);  \r\n\r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"orientation"})}),(0,s.jsxs)(n.td,{children:["The orientation in ",(0,s.jsx)(n.strong,{children:"okapi unit"}),"."]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_odometry_rotation",children:"get_odometry_rotation()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the odometry rotation in degrees.",(0,s.jsx)(n.br,{}),"\n","The odometry rotation is needed for ROTATED configurations like: ADI_TWO_ROTATED_ODOM and ROTATION_TWO_ROTATED_ODOM"]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_odometry_rotation",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   double get_odometry_rotation(); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n angle_of_rotation = my_chassis.get_odometry_rotation();  \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The tracking wheels rotation from the robots center."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_pose",children:"get_pose()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the current pose (the position and orientation vector)."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_pose",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   std::vector<double> get_pose(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n std::vector<double> pose; \r\n pose = my_chassis.get_pose(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The pose vector."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_position",children:"get_position()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the current position (x,y)"}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_position",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   std::vector<double> get_pose(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n std::vector<double> position; \r\n position = my_chassis.get_position(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The position vector."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_x",children:"get_x()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the current x coordinate in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_x",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    double get_x() const ; \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double x;  \r\n x = my_chassis.get_x(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The x coordinate in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_y",children:"get_y()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the current ",(0,s.jsx)(n.strong,{children:"y"})," coordinate in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_y",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    double get_y() const ; \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double x;  \r\n y = my_chassis.get_y(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The y coordinate in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_orientation",children:"get_orientation()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the current orientation (theta) in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_orientation",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"    double get_orientation() const ; \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double orientation_degrees;  \r\n orientation_degrees = my_chassis.get_orientation(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The orientation in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_forwardtracker_position",children:"get_ForwardTracker_position()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the forwardtracker position value in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_forward_tracker",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_ForwardTracker_position(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double forward_tracker_pos;  \r\n forward_tracker_pos = my_chassis.get_ForwardTracker_position(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The forwardtracker position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_sideways_position",children:"get_SideWays_position()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the Sidewaystracker position value in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_sideways_tracker",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_SideWays_position(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double sideways_tracker_pos;  \r\n sideways_tracker_pos = my_chassis.get_SideWays_position(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The sidewaystracker position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_average_motors_position_deg",children:"get_average_motors_position_deg()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the drive-train average mposition in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_avg_motors_pos_deg",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_average_motors_position_deg();\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double motors_chassis_pos;  \r\n motors_chassis_pos = my_chassis.get_average_motors_position_deg(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_left_position_deg",children:"get_left_position_deg()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the left side of the drive-train average position in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_left_motors_pos_deg",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_left_position_deg(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double chassis_left_position_deg;  \r\n chassis_left_position_deg= my_chassis.get_left_position_deg(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_right_position_deg",children:"get_right_position_deg()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the right side of the drive-train average position in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_right_motors_pos_deg",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_right_position_deg(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double chassis_right_position_deg;  \r\n chassis_right_position_deg = my_chassis.get_right_position_deg(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"degrees"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_average_motors_position_inches",children:"get_average_motors_position_inches();"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the drive train average position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_average_motors_position_inche",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_average_motors_position_inches();\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double chassis_avg_pos_inches;  \r\n chassis_avg_pos_inches = my_chassis.get_average_motors_position_inches();\r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_left_position_inches",children:"get_left_position_inches();"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the left side  of the drive train average position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_left_position_inch",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_left_position_inches(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double left_position_inches;  \r\n left_position_inches = my_chassis.get_left_position_inches(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_right_position_inches",children:"get_right_position_inches()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the right side  of the drive train average position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_right_position_inch",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_right_position_inches(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double right_position_inches;  \r\n right_position_inches = my_chassis.get_right_position_inches(); \r\n}\r\n\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average motor position in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_actual_rpm",children:"get_actual_rpm()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the current average chassis output velocity ",(0,s.jsx)(n.strong,{children:"(RPM)"})," between the left and right sides."]}),"\n",(0,s.jsx)(n.p,{children:"This function calculates and returns the average rotational speed in RPM of the base motors."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"This velocity is the average of the base motors' output."})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_actual_rpm",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_actual_rpm(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double actual_rpms;  \r\n actual_rpms = my_chassis.get_actual_rpm(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The average velocity in RPM."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_actual_velocity",children:"get_actual_velocity()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the current chassis lineal velocity in ",(0,s.jsx)(n.strong,{children:"distance/seconds"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_actual_velocity",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"double get_actual_velocity(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void autonomous() {\r\n double actual_velocity;  \r\n actual_velocity = my_chassis.get_actual_velocity(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The maximum Drive train lineal velocity."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_current_index",children:"get_current_index()"}),"\n",(0,s.jsx)(n.p,{children:"Get the current index of a path when the robot its following it."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_get_current_index",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   int get_current_index(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{5,12}",children:"\r\n void actions(void*){\r\n  while (1) {    \r\n    //When the robot is at index 5 of a path:\r\n    if(my_chassis.get_current_index()==5){\r\n      /*\r\n      Do some things. \r\n      */\r\n    }\r\n    \r\n     //When the robot is at index 13 of a path:\r\n    if(my_chassis.get_current_index()==13){\r\n      /*\r\n      Do another things.  \r\n      */\r\n    }\r\n  }\r\n}\r\n\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"reset_odometry",children:"reset_odometry()"}),"\n",(0,s.jsx)(n.p,{children:"Resets the position, orientation, tracking wheels value of the robot."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_reset_odometry",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void reset_odometry();\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{6}",children:"void initialize() {\r\n /*\r\n Restarting the encoders and IMU,\r\n It s recommended to use a 3000 milliseconds delay. \r\n */\r\n my_chassis.reset_odometry(); \r\n pros::delay(3000); \r\n}\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"reset_imu",children:"reset_IMU()"}),"\n",(0,s.jsx)(n.p,{children:"Resets the IMU."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_reset_IMU",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void reset_IMU(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{5}",children:"void initialize() {\r\n /*\r\n It s recommended to use a 3000 milliseconds of delay. \r\n */\r\n my_chassis.reset_IMU(); \r\n pros::delay(3000); \r\n}\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"tare_motors_position",children:"tare_motors_position()"}),"\n",(0,s.jsx)(n.p,{children:"Tares the integrated encoders from the drive train motors."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_telemetry_tare_motors_position",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void tare_motors_position();\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3}",children:"void initialize() {\r\n\r\n my_chassis.tare_motors_position(); \r\n pros::delay(100); \r\n}\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"configuration-functions",children:"Configuration Functions"}),"\n",(0,s.jsx)(n.h3,{id:"set_brake",children:"set_brake()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the chassis motors brake mode."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_brake",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_brake(const pros::motor_brake_mode_e_t mode); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{2-4}",children:"void initialize() {\r\n  my_chassis.set_brake(pros::E_MOTOR_BRAKE_COAST); \r\n  my_chassis.set_brake(pros::E_MOTOR_BRAKE_HOLD);\r\n  my_chassis.set_brake(pros::E_MOTOR_BRAKE_BRAKE); \r\n}\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_wheels_diameter",children:"set_wheels_diameter()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the chassis wheels diameter in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_wheels_diameter",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_wheels_diameter(const float _wheels_diameter); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_wheels_diameter(3.25);\r\n}\n"})})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_center_distance",children:"set_center_distance()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the distance between lateral wheels to the center of rotation in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_center_distance",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_center_distance(const float distance); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_center_distance(6);\r\n\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"distance"})}),(0,s.jsxs)(n.td,{children:["The center distance in ",(0,s.jsx)(n.strong,{children:"inches"})]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_gearing",children:"set_gearing()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the drivetrain cartridge."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_gearing",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_gearing(const pros::motor_gearset_e_t gearset);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{2-4}",children:"void initialize() {\r\n  my_chassis.set_gearing(pros::E_MOTOR_GEAR_100);\r\n  my_chassis.set_gearing(pros::E_MOTOR_GEAR_200);\r\n  my_chassis.set_gearing(pros::E_MOTOR_GEAR_600);\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"gearset"})}),(0,s.jsx)(n.td,{children:"The gearset"})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_gear_ratio",children:"set_gear_ratio()"}),"\n",(0,s.jsx)(n.p,{children:"Sets the chassis\xb4s gear ratio."}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"speed is equal to = rpm/ gear ratio.  And torque is equal to = torque* gear_ratio"})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_gear_ratio",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_gear_ratio(const float _gear_ratio); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_gear_ratio(1.33333);\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"_gear_ratio"})}),(0,s.jsxs)(n.td,{children:["Is the result of Driven/Driving, Drive",":Driving"]})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_max_rpm",children:"set_max_rpm()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the maximum chassis velocity ",(0,s.jsx)(n.strong,{children:"RPM"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["May you want to test ",(0,s.jsx)(n.code,{children:"auto_set_max_actual_vel"})," function to know this value and then\r\nset the max actual velocity with this function."]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_max_rpm",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void set_max_rpm(const float _max_rpm=0);\r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_max_rpm(600);\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"_max_rpm"})}),(0,s.jsx)(n.td,{children:"The maximum chassis RPM."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_max_velocity",children:"set_max_velocity()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the maximum chassis lineal velocity ",(0,s.jsx)(n.strong,{children:"inches/seconds"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["May you want to test ",(0,s.jsx)(n.code,{children:"auto_set_max_actual_vel"})," function to know this value and then\r\nset the max actual velocity with this function."]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_max_velocity",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_max_velocity(const float _max_vel=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_max_velocity(10);\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"_max_vel"})}),(0,s.jsx)(n.td,{children:"The maximum robot velocity."})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"set_max_accel",children:"set_max_accel()"}),"\n",(0,s.jsxs)(n.p,{children:["Sets the maximum chassis acceleration ",(0,s.jsxs)(n.strong,{children:["distance/seconds ",(0,s.jsx)("sup",{children:"2 "})]}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_set_max_accel",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" void set_max_accel(const float _max_accel=0); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void initialize() {\r\n  my_chassis.set_max_accel(2);\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsx)(n.tbody,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"_max_accel"})}),(0,s.jsx)(n.td,{children:"The maximun robot acceleration"})]})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_max_rpm",children:"get_max_rpm()"}),"\n",(0,s.jsx)(n.p,{children:"Gets maximum robot RPM."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_max_rpm",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" double get_max_rpm(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n  double max_robot_rpm = my_chassis.get_max_rpm(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The maximum Drive train RPM."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_max_velocity",children:"get_max_velocity()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the maximum robot lineal velocity in ",(0,s.jsx)(n.strong,{children:"distance/seconds"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_max_velocity",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" double get_max_velocity(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n  double max_robot_velocity = my_chassis.get_max_velocity(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The maximum robot lineal velocity."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_max_accel",children:"get_max_accel()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the maximum robot lineal acceleration in ",(0,s.jsxs)(n.strong,{children:["distance/seconds ",(0,s.jsx)("sup",{children:"2 "})]}),".."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_max_acceleration",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" double get_max_accel(); \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n  double max_robot_accel = my_chassis.get_max_accel(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The maximum robot lineal acceleration."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_wheels_diameter",children:"get_wheels_diameter()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the robot wheels diameter in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_wheels_diameter",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:" float get_wheels_diameter() const ;  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n  float wheels_diameter = my_chassis.get_wheels_diameter();\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The robot wheels diameter in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_center_distance",children:"get_center_distance()"}),"\n",(0,s.jsxs)(n.p,{children:["Gets the center distance in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_center_distance",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  float get_center_distance() const;  \r\n\n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n  float center_distance = my_chassis.get_center_distance(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The robot center distance in ",(0,s.jsx)(n.strong,{children:"inches"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_gearing",children:"get_gearing()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the robot motors gearing."}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsx)(n.p,{children:"[0] ->36:1, 100 RPM, Red gear set."}),(0,s.jsx)(n.p,{children:"[1] ->18:1, 200 RPM, Green gear set."}),(0,s.jsx)(n.p,{children:"[2] -> 6:1, 600 RPM, Blue gear set."})]}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_gearing",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  pros::motor_gearset_e get_gearing() const ; \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",metastring:"{3,7,11}",children:'void autonomous() {\r\n  float center_distance = my_chassis.get_center_distance(); \r\n  if (my_chassis.get_gearing() ==pros::E_MOTOR_GEAR_100 ){\r\n    std::cout<<"The chassis have red motors"; \r\n  }\r\n\r\n  if (my_chassis.get_gearing() ==pros::E_MOTOR_GEAR_200 ){\r\n    std::cout<<"The chassis have blue motors"; \r\n  }\r\n\r\n  if (my_chassis.get_gearing() ==pros::E_MOTOR_GEAR_600 ){\r\n    std::cout<<"The chassis have blue motors"; \r\n  }\r\n\r\n\r\n}\n'})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The current internal gear ratio of the motors."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_encoders_units",children:"get_encoders_units()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the units for recording position by the chassis motors."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_encoders_units",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  pros::MotorUnits get_encoders_units(); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    pros::MotorUnits encoder_units = my_chassis.get_encoders_units();  \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," Motors encoder units."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_actual_brake",children:"get_actual_brake()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the current brake mode."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_actual_brake",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   pros::motor_brake_mode_e_t get_actual_brake(); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    pros::motor_brake_mote_e_t current_brake = my_chassis.get_actual_brake(); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," Motors brake."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"get_gear_ratio",children:"get_gear_ratio()"}),"\n",(0,s.jsx)(n.p,{children:"Gets the chassis gear ratio."}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_configuration_get_gear_ratio",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"  float get_gear_ratio() const ; \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    float robot_gear_ratio = my_chassis.get_gear_ratio();  \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," The result of the division of Driven/Driving."]}),"\n",(0,s.jsx)(n.h2,{id:"auto-setters",children:"Auto setters"}),"\n",(0,s.jsx)(n.h3,{id:"auto_set_max_velocity_with_position",children:"auto_set_max_velocity_with_position()"}),"\n",(0,s.jsx)(n.p,{children:"Runs a test (your bot would runs in a straight line) to set the maximun real robot lineal velocity."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The linear velocity is calculated using the change in position over time"})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["The function is useful when you want to know the real maximun velocity of your robot-\r\n",(0,s.jsx)(n.strong,{children:"Be careful using this function"}),", if the time is to much your robot may crash with the field."]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_auto_setters_max_velocity_with_position",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void auto_set_max_velocity_with_position(const int time_msec, const float scale); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    my_chassis.auto_set_max_velocity_with_position(4,.8); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"time_msec"})}),(0,s.jsx)(n.td,{children:"The time in miliseconds that robot would run  at maximum velocity to make the math."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"The scale of velocity (.8,.9) would be nice."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"autoset_max_vel_accel",children:"autoset_max_vel_accel()"}),"\n",(0,s.jsx)(n.p,{children:"Runs a test (your bot would runs in a straight line) to set the maximun real robot lineal velocity."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"The linear velocity and acceleration are calculated using the motors RPMS"})}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["The function is useful when you want to know the real maximun velocity of your robot-\r\n",(0,s.jsx)(n.strong,{children:"Be careful using this function"}),", if the time is to much your robot may crash with the field."]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_auto_setters_max_vel_accel",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void autoset_max_vel_accel(const int time_msec, const float scale);  \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    my_chassis.auto_set_max_vel_accel(2000,.8)\r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"time_msec"})}),(0,s.jsx)(n.td,{children:"The time in miliseconds that robot would run  at maximum velocity to make the math."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"The scale of velocity (.8,.9) would be nice."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"auto_set_max_rpm",children:"auto_set_max_rpm()"}),"\n",(0,s.jsx)(n.p,{children:"Runs a test (your bot would runs in a straight line) to set the maximun real robot lineal velocity."}),"\n",(0,s.jsx)(n.admonition,{type:"danger",children:(0,s.jsxs)(n.p,{children:["The function is useful when you want to know the real maximun velocity of your robot-\r\n",(0,s.jsx)(n.strong,{children:"Be careful using this function"}),", if the time is to much your robot may crash with the field."]})}),"\n",(0,s.jsxs)(i.A,{groupId:"TankChassis_auto_setters_max_rpm",defaultValue:"proto",values:[{label:"Prototype",value:"proto"},{label:"Example ",value:"example"}],children:[(0,s.jsx)(o.A,{value:"proto",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"   void auto_set_max_rpm(const int time_msec, const float scale); \n"})})}),(0,s.jsx)(o.A,{value:"example",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:"void autonomous() {\r\n    my_chassis.auto_set_max_rpm(2000,.8); \r\n}\n"})})})]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameters"}),(0,s.jsx)(n.th,{})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"time_msec"})}),(0,s.jsx)(n.td,{children:"The time in miliseconds that robot would run  at maximum velocity to make the math."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"scale"})}),(0,s.jsx)(n.td,{children:"The scale of velocity (.8,.9) would be nice."})]})]})]}),"\n",(0,s.jsx)(n.hr,{})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>o});r(6540);var s=r(4164);const t={tabItem:"tabItem_Ymn6"};var i=r(4848);function o(e){let{children:n,hidden:r,className:o}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(t.tabItem,o),hidden:r,children:n})}},1470:(e,n,r)=>{r.d(n,{A:()=>y});var s=r(6540),t=r(4164),i=r(3104),o=r(6347),l=r(205),a=r(7485),d=r(1682),c=r(679);function h(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function u(e){const{values:n,children:r}=e;return(0,s.useMemo)((()=>{const e=n??function(e){return h(e).map((e=>{let{props:{value:n,label:r,attributes:s,default:t}}=e;return{value:n,label:r,attributes:s,default:t}}))}(r);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function x(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function _(e){let{queryString:n=!1,groupId:r}=e;const t=(0,o.W6)(),i=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r});return[(0,a.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function p(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,i=u(e),[o,a]=(0,s.useState)((()=>function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!x({value:n,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const s=r.find((e=>e.default))??r[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:n,tabValues:i}))),[d,h]=_({queryString:r,groupId:t}),[p,j]=function(e){let{groupId:n}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(n),[t,i]=(0,c.Dv)(r);return[t,(0,s.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:t}),g=(()=>{const e=d??p;return x({value:e,tabValues:i})?e:null})();(0,l.A)((()=>{g&&a(g)}),[g]);return{selectedValue:o,selectValue:(0,s.useCallback)((e=>{if(!x({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);a(e),h(e),j(e)}),[h,j,i]),tabValues:i}}var j=r(2303);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=r(4848);function v(e){let{className:n,block:r,selectedValue:s,selectValue:o,tabValues:l}=e;const a=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),c=e=>{const n=e.currentTarget,r=a.indexOf(n),t=l[r].value;t!==s&&(d(n),o(t))},h=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":r},n),children:l.map((e=>{let{value:n,label:r,attributes:i}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,ref:e=>a.push(e),onKeyDown:h,onClick:c,...i,className:(0,t.A)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":s===n}),children:r??n},n)}))})}function b(e){let{lazy:n,children:r,selectedValue:t}=e;const i=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===t));return e?(0,s.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:i.map(((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function f(e){const n=p(e);return(0,m.jsxs)("div",{className:(0,t.A)("tabs-container",g.tabList),children:[(0,m.jsx)(v,{...n,...e}),(0,m.jsx)(b,{...n,...e})]})}function y(e){const n=(0,j.A)();return(0,m.jsx)(f,{...e,children:h(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);